while ((rez = getopt_long(argc, argv, short_options,
                              long_options, &option_index)) != -1) {
        switch (rez) {
            case 'h': { //help
                std::cout << "-h or --help to output of this help" << std::endl;
                std::cout << "-r or --read [fileName.bmp] to read pictures from a file with the name \"fileName.bmp\""
                          << std::endl;
                std::cout << "-s or --save [fileName.bmp] to save pictures to a file with the name \"fileName.bmp\""
                          << std::endl;
                break;
            };
            case 'r': { //read
                isNameCorrect(optarg);
                std::ifstream file(optarg, std::ifstream::binary);
                if (!file.is_open()) {
                    throw std::invalid_argument("Can't open input file");
                }
                bitmap.getBitmapFromFile(file);
                file.close();
                break;
            };
            case 'v': { //save
                std::ofstream result(optarg, std::ofstream::binary);
                bitmap.saveBitmap(result);
                result.close();
                bitmap.clearBitmap();
                break;
            };
            case 'm': { //mirror
                
                break;
            };

            case 'a': { //OX | OY (axis)
                std::cout << optarg << std::endl;

                break;
            };

            case 'd': { //draw_a_rectangle
                std::cout << optarg << std::endl;

                break;
            };
            case 'f': { // "start"
                std::cout << optarg << std::endl;

                break;
            };
            case 'u': { // "finish"
                std::cout << optarg << std::endl;

                break;
            };
            case 'c': { // "color_rectangle"
                std::cout << optarg << std::endl;

                break;
            };
            case 'i': { // "is_fill"
                std::cout << optarg << std::endl;

                break;
            };
            case 'l': { // "color_fill"
                std::cout << optarg << std::endl;

                break;
            };
            case 'g': { // "width_line"
                std::cout << optarg << std::endl;

                break;
            };
            case 'p': { // "draw_pentagram"
                std::cout << optarg << std::endl;

                break;
            };
            case 'z': { // "center"
                std::cout << optarg << std::endl;

                break;
            };
            case 'q': { // "color_pentagram"
                std::cout << optarg << std::endl;

                break;
            };
            case 'j': { // "make_collage"
                std::cout << optarg << std::endl;

                break;
            };
            case 'k': { // "num"
                std::cout << optarg << std::endl;

                break;
            };
            case 'b': { // "picture_list"
                std::cout << optarg << std::endl;

                break;
            };
            case '?':
            default: {
                printf("found unknown option\n");
                break;
            };
        };
    };












while ((rez = getopt_long(argc, argv, short_options,
                              long_options, &option_index)) != -1) {
        switch (rez) {
            case 'k': { // "num"
                std::cout << optarg << std::endl;

                break;
            };
            case 'b': { // "picture_list"
                std::cout << optarg << std::endl;

                break;
            };
            case '?':
            default: {
                printf("found unknown option\n");
                break;
            };
        };
    };

